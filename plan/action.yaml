name: Plan

inputs:
  tf-binary:
    description: Terraform or OpenTofu binary name
    default: tofu

  dir:
    description: Directory to run in
    required: true
  apply_workflow_id:
    description: Workflow ID (filename) to apply plans
    default: apply.yaml

outputs:
  plan:
    description: Plan string
    value: ${{ steps.plan.outputs.plan }}
  has-diff:
    description: Plan has diff
    value: ${{ steps.plan.outputs.has-diff }}

runs:
  using: composite
  steps:
    - name: Sanitize artifact name
      id: artifact-name
      shell: bash
      run: |
        DIR="${{ inputs.dir }}"
        NAME="${DIR//\//___}"
        echo "name=$NAME" >> $GITHUB_OUTPUT

    - id: plan
      name: Plan
      working-directory: ${{ inputs.dir }}
      shell: bash
      run: |
        set -o pipefail

        set +o pipefail
        ${{ inputs.tf-binary }} plan -lock-timeout=300s ${{ contains(inputs.tf-binary, 'tofu') && '-concise ' || ''}}-detailed-exitcode -out /tmp/tf.plan | tee /tmp/plan-raw.txt
        PLAN_EXIT_CODE=${PIPESTATUS[0]}
        set -o pipefail
        # Exit code 1 means execution error, so fail the step
        if [ $PLAN_EXIT_CODE -eq 1 ]; then
          exit 1
        fi

        # Remove ansi colors
        </tmp/plan-raw.txt sed -e 's/\x1b\[[0-9;]*m//g' \
          | grep -v -E "used the selected providers to generate the following execution|Resource actions are indicated with the following symbols" \
          | grep -v -E "Acquiring state lock|Reading|Still reading|Read complete after" \
          | grep -v -E "has compared your real infrastructure against your configuration and|found no differences, so no changes are needed|Releasing state lock" \
          | grep -v -E "─────────────────────────────────────────────────────────────────────────────" \
          | grep -v -E "Saved the plan to|To perform exactly these actions, run the following command to apply|${{ inputs.tf-binary }} apply \"/tmp/tf.plan\"" \
          > /tmp/plan.txt
        cp /tmp/plan.txt /tmp/plan-${{ steps.artifact-name.outputs.name }}.txt

        echo 'plan<<EOF' >> $GITHUB_OUTPUT
        cat /tmp/plan.txt >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

        echo '### Plan (${{ inputs.dir }})' >> $GITHUB_STEP_SUMMARY
        echo '```plaintext' >> $GITHUB_STEP_SUMMARY
        cat /tmp/plan.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo 'To manually apply this plan, visit' >> $GITHUB_STEP_SUMMARY
        echo '${{ github.server_url }}/${{ github.repository }}/actions/workflows/${{ inputs.apply_workflow_id }}' >> $GITHUB_STEP_SUMMARY
        echo 'and fill `${{ github.run_id }}` to run_id parameter.' >> $GITHUB_STEP_SUMMARY

        if [ $PLAN_EXIT_CODE -eq 0 ]; then
          echo "has-diff=false" >> $GITHUB_OUTPUT
        elif [ $PLAN_EXIT_CODE -eq 2 ]; then
          echo "has-diff=true" >> $GITHUB_OUTPUT
        else
          echo "Unexpected exit code: $PLAN_EXIT_CODE"
          exit 1
        fi

    - name: Upload plan text
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: plan-text-${{ steps.artifact-name.outputs.name }}
        path: /tmp/plan-${{ steps.artifact-name.outputs.name }}.txt
    - name: Upload plan file
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: plan-file-${{ steps.artifact-name.outputs.name }}
        path: /tmp/tf.plan

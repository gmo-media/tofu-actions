name: Fix Drift with Claude

inputs:
  dir:
    description: Directory that has drift to fix
    required: true
  plan:
    description: The plan output from drift check showing the drift
    required: true

  github-token:
    description: GitHub token (GitHub App or PAT is required to trigger workflows)
  anthropic-api-key:
    description: Anthropic API key
  claude-code-oauth-token:
    description: Claude Code OAuth token (alternative to anthropic_api_key)

  base-branch:
    description: Base branch for the PR
    default: ${{ github.ref_name }}

outputs:
  pr-url:
    description: URL of the created pull request
    value: ${{ steps.create-pr.outputs.pr-url }}
  branch-name:
    description: Name of the branch with fixes
    value: ${{ steps.branch.outputs.name }}

runs:
  using: composite
  steps:
    # Create a new branch for the fix
    - name: Create fix branch
      id: branch
      shell: bash
      run: |
        BRANCH_NAME="fix-drift-$(echo '${{ inputs.dir }}' | tr '/' '-')-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT

    - name: Save plan to file
      shell: bash
      env:
        PLAN: ${{ inputs.plan }}
      run: echo "$PLAN" > /tmp/plan.txt

    - name: Setup Claude Code
      shell: bash
      run: |
        curl -fsSL https://claude.ai/install.sh | bash -s latest
        export PATH="~/.local/bin:$PATH"

    # Use Claude Code to fix the drift
    - name: Fix drift with Claude Code
      shell: bash
      run: |
        echo "$PROMPT" | \
          claude -p --verbose --output-format stream-json \
          --allowedTools "Bash,Edit,Glob,Grep,LS,MultiEdit,Read,Task,TodoWrite,WebFetch,WebSearch,Write" \
          --disallowedTools "Bash(tofu apply),Bash(git commit),Bash(git push)"
      env:
        ANTHROPIC_API_KEY: ${{ inputs.anthropic-api-key }}
        CLAUDE_CODE_OAUTH_TOKEN: ${{ inputs.claude-code-oauth-token }}
        PROMPT: |
          # CRITICAL INSTRUCTIONS FOR FIXING INFRASTRUCTURE DRIFT
          You have been given a critical task to fix infrastructure drift in Terraform/OpenTofu configuration files.
          Your goal is to update the .tf files to match the current real-world infrastructure state.

          ## Important Rules
          - NEVER run `tofu apply` even if there is a need to update tfstate. Preserve the existing infrastructure state.
          - Only make changes to .tf files and run `tofu plan`.
          - Always choose the least destructive approach. Be surgical and precise with your edits.
          
          ## Context
          - Directory with drift: ${{ inputs.dir }}
          - The plan result is in /tmp/plan.txt
          
          ## YOUR MISSION - FOLLOW THESE STEPS EXACTLY:
          1. Read the plan and understand the changes
          The plan is trying to *revert* the external changes done to the infrastructure.
          For example, if the plan shows:
          ```
          ~ resource "aws_instance" "example" {
              ~ instance_type = "t3.micro" -> "t2.micro"
          }
          ```
          "t3.micro" is the real infrastructure state, while "t2.micro" is what's in our .tf files.
          This means a user may have manually changed the instance type from t2.micro to t3.micro, and didn't update the .tf file.
          You should update the .tf file to match reality - "t3.micro".
          
          The plan is usually quite verbose with default values.
          Try not to be confused by these verbose lines - try to extract only the important changes.
          
          2. Fix the drift
          Update .tf files to match the CURRENT REAL INFRASTRUCTURE STATE.
          This means: incorporate the external changes into your .tf files.
          
          3. Validate
          After making changes, run: `tofu plan` within directory `${{ inputs.dir }}`.
          The plan MUST show "No changes. Your infrastructure matches the configuration."
          If there are still differences, continue fixing until plan shows no changes.

    # Commit the changes (whether successful or not, for debugging)
    - name: Commit changes
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

        # Check if there are changes to commit
        if git diff --exit-code; then
          echo "No changes to commit"
          exit 0
        fi

        git add -A

        COMMIT_MSG="fix: Auto-fix infrastructure drift in ${{ inputs.dir }}

        This commit automatically fixes infrastructure drift detected in ${{ inputs.dir }}.
        The changes update the Terraform/OpenTofu configuration to match the current
        real-world infrastructure state.

        Automated by Claude Code drift fixer"

        git commit -m "$COMMIT_MSG"
        git push origin ${{ steps.branch.outputs.name }}
        echo "Changes committed and pushed to branch ${{ steps.branch.outputs.name }}"

    # Create a pull request if changes were made
    - name: Create Pull Request
      id: create-pr
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token || github.token }}
      run: |
        # Check if changes were pushed
        if ! git rev-parse --verify origin/${{ steps.branch.outputs.name }} >/dev/null 2>&1; then
          echo "No changes were pushed, skipping PR creation"
          exit 0
        fi

        # Using GitHub CLI to create PR
        PR_URL=$(gh pr create \
            --title "ðŸ”§ Auto-fix infrastructure drift in ${{ inputs.dir }}" \
            --base "${{ inputs.base-branch }}" \
            --head "${{ steps.branch.outputs.name }}" \
            --body "## ðŸ¤– Automated Drift Fix

        This PR is an automatic attempt to fix infrastructure drift in \`${{ inputs.dir }}\`.

        ### What happened?
        Infrastructure drift was detected during the drift check. This means the real-world infrastructure 
        state differs from what's defined in the Terraform/OpenTofu configuration files.

        ### What this PR does
        - Updates the .tf configuration files to match the current real infrastructure state
        - Makes minimal, non-destructive changes
        - Ensures \`tofu plan\` shows \"No changes\" after the fix

        ### Review checklist
        - [ ] Review the changes to ensure they correctly reflect the infrastructure state
        - [ ] Verify that only drifted values were updated
        - [ ] Confirm no unnecessary default values were added
        - [ ] Check that the changes are minimal and non-destructive

        ---
        *This PR was automatically generated by the drift fix workflow using Claude Code.*")

        echo "Pull request created: $PR_URL"
        echo "pr-url=$PR_URL" >> $GITHUB_OUTPUT
